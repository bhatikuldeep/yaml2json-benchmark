name: Build & Release Binaries

on:
  push:
    tags:
      - 'v*'  # triggers on version tags like v1.0.0

permissions:
  contents: write

jobs:
  build-and-release:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        arch: [amd64, arm64]  # Intel and Apple Silicon
    runs-on: ${{ matrix.os }}

    steps:
      # 1. Checkout repo
      - name: Checkout repo
        uses: actions/checkout@v4

      # 2. Setup Go
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22

      # 3. Setup Rust
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      # 4. Build Go binary
      - name: Build Go
        run: |
          set -eux
          cd go
          go mod tidy
          GOOS=$(echo "${{ runner.os }}" | tr '[:upper:]' '[:lower:]')
          case "$GOOS" in
            macos)  GOOS=darwin ;;
            windows) GOOS=windows ;;
          esac
          GOARCH=${{ matrix.arch }}
          OUTPUT="../yaml2json-go-${GOOS}-${GOARCH}"
          [ "$GOOS" = "windows" ] && OUTPUT="${OUTPUT}.exe"
          go build -v -o "$OUTPUT"
          [ -f "$OUTPUT" ] || (echo "Go binary not found!" && exit 1)
          cd ..

      # 5. Build Rust binary
      - name: Build Rust
        run: |
          set -eux
          cd rust
          # Determine Rust target for matrix
          TARGET=""
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            TARGET="aarch64-apple-darwin"
            [ "${{ matrix.arch }}" = "amd64" ] && TARGET="x86_64-apple-darwin"
          elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            TARGET="x86_64-unknown-linux-gnu"
            [ "${{ matrix.arch }}" = "arm64" ] && TARGET="aarch64-unknown-linux-gnu"
          fi
          echo "Building Rust target: $TARGET"
          cargo build --release --target "$TARGET"
          OUTPUT="../yaml2json-rust-${TARGET}"
          cp target/"$TARGET"/release/yaml2json-rust "$OUTPUT"
          [ -f "$OUTPUT" ] || (echo "Rust binary not found!" && exit 1)
          cd ..

      # 6. Prepare artifacts
      - name: Prepare artifacts
        run: |
          set -eux
          mkdir -p artifacts
          mv yaml2json-go-* artifacts/
          mv yaml2json-rust-* artifacts/
          if command -v sha256sum > /dev/null; then
            sha256sum artifacts/* > artifacts/checksums.txt
          else
            shasum -a 256 artifacts/* > artifacts/checksums.txt
          fi
          ls -lah artifacts

      # 7. Create GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      # 8. Upload binaries to Release
      - name: Upload binaries to Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
