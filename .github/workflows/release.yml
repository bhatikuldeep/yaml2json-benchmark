name: Build & Release Binaries

on:
  push:
    tags:
      - 'v*' # triggers on version tags like v1.0.0

permissions:
  contents: write

jobs:
  build-and-release:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        arch: [amd64, arm64] # support both Intel & Apple Silicon
    runs-on: ${{ matrix.os }}

    steps:
      # 1. Checkout repo
      - name: Checkout repo
        uses: actions/checkout@v4

      # 2. Setup Go
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22

      # 3. Setup Rust
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      # 4. Build Go binary
      - name: Build Go
        run: |
          set -eux
          cd go
          go mod tidy
          GOOS=$(echo "${{ runner.os }}" | tr '[:upper:]' '[:lower:]')
          case "$GOOS" in
            macos)  GOOS=darwin ;;
            windows) GOOS=windows ;;
          esac
          GOARCH=${{ matrix.arch }}
          OUTPUT="../yaml2json-go-${GOOS}-${GOARCH}"
          if [ "$GOOS" = "windows" ]; then
            OUTPUT="${OUTPUT}.exe"
          fi
          go build -v -o "$OUTPUT"
          cd ..

      # 5. Build Rust binary
      - name: Build Rust
        run: |
          set -eux
          cd rust
          cargo build --release
          GOOS=$(echo "${{ runner.os }}" | tr '[:upper:]' '[:lower:]')
          case "$GOOS" in
            macos)  GOOS=darwin ;;
            windows) GOOS=windows ;;
          esac
          GOARCH=${{ matrix.arch }}
          OUTPUT="../yaml2json-rust-${GOOS}-${GOARCH}"
          if [ "$GOOS" = "windows" ]; then
            OUTPUT="${OUTPUT}.exe"
          fi
          cp target/release/yaml2json-rust "$OUTPUT" || cp target/release/yaml2json-rust.exe "$OUTPUT"
          cd ..

      # 6. Prepare artifacts
      - name: Prepare artifacts
        run: |
          set -eux
          mkdir -p artifacts
          mv yaml2json-go-* artifacts/ || true
          mv yaml2json-rust-* artifacts/ || true
          if command -v sha256sum > /dev/null; then
            sha256sum artifacts/* > artifacts/checksums.txt
          else
            shasum -a 256 artifacts/* > artifacts/checksums.txt
          fi
          ls -lah artifacts

      # 7. Create GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}

      # 8. Upload binaries to Release
      - name: Upload binaries to Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*
